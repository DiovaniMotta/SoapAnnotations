package org.soap.diovani.motta.manager;

import java.lang.reflect.Field;
import java.util.HashMap;

import javax.xml.bind.PropertyException;

import org.soap.diovani.motta.annotations.SoapCollection;
import org.soap.diovani.motta.annotations.SoapObject;
import org.soap.diovani.motta.annotations.SoapProperty;
import org.soap.diovani.motta.annotations.entidades.*;

/**
 * 
 * @author Diovani Bernardi da Motta
 * Data: 09/05/2015
 * Classe responsável por armazenar em memoria os atributos contidos na classe 
 */
public class SessionCache {

	//Objeto responsável por armazenar uma coleção de classe e anostações das mesmas
	private static final HashMap<Class<?>, ClassAnnotations> cache = new HashMap<Class<?>,ClassAnnotations>();

	/**
	 * Método responsável por retornar um objeto contendo as anotações de classe e de seus atributos
	 * @param kclasse a classe que será verificada
	 * @return um objeto do tipo ClassAnnotations, contendo as anotações de classes e objetos
	 * @throws PropertyException 
	 */
	public static ClassAnnotations annotations(Class<?> kclasse){
		//verifico se o objeto já está contido na lista
		ClassAnnotations classAnnotations = cache.get(kclasse);
		// se nao estiver contido
		if(classAnnotations == null){
			// verifico se existe a anotação SoapObject
			SoapObject soapObject = kclasse.getAnnotation(SoapObject.class);
			if(soapObject == null){
				throw new NullPointerException("A classe não possui as anotações necessárias.");
			}
			//instancio um objeto do tipo ClassAnotations 
			classAnnotations = new ClassAnnotations();
			classAnnotations.setKclasse(kclasse);
			classAnnotations.setNamespace(soapObject.namespace());
			classAnnotations.setid(soapObject.id());
			// retorno todos os atributos declarados na classe
			Field[] fields = kclasse.getDeclaredFields();
			//itero toda a lista de objetos
			for(Field field : fields){
				//verifico se o atributo possui a anotação SoapProperty  
				SoapProperty soapProperty = field.getAnnotation(SoapProperty.class);
				if(soapProperty != null){
					field.setAccessible(true);
					FieldAnnotations fieldAnnotations = new FieldAnnotations();
					fieldAnnotations.setField(field);
					fieldAnnotations.setName(soapProperty.property());
					fieldAnnotations.setType(soapProperty.type());
					fieldAnnotations.setAnnotation(SoapProperty.class);
					if(fieldAnnotations.getName().isEmpty()){
						fieldAnnotations.setName(field.getName());
					}
					classAnnotations.getFields().add(fieldAnnotations);
				}
				//verifico se o atributo iterado possui a anotaçção de collection
				SoapCollection soapCollection = field.getAnnotation(SoapCollection.class);
				if(soapCollection != null){
					field.setAccessible(true);
					FieldAnnotations fieldAnnotations = new FieldAnnotations();
					fieldAnnotations.setField(field);
					fieldAnnotations.setName(soapCollection.property());
					fieldAnnotations.setAnnotation(SoapCollection.class);
					if(fieldAnnotations.getName().isEmpty()){
						fieldAnnotations.setName(field.getName());
					}
					classAnnotations.getFields().add(fieldAnnotations);
				}
			}
			cache.put(kclasse,classAnnotations);
		}
		return classAnnotations;
	}
}
